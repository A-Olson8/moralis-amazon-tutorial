{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n/**\n * Automatically generated code, via genSolanaAPI.js\n * Do not modify manually\n */\n\n\nvar axios = require('axios');\n\nvar SolanaApi = /*#__PURE__*/function () {\n  function SolanaApi() {\n    (0, _classCallCheck2.default)(this, SolanaApi);\n  }\n\n  (0, _createClass2.default)(SolanaApi, null, [{\n    key: \"initialize\",\n    value: // URL will be changed when api is deployed\n    function (_ref) {\n      var apiKey = _ref.apiKey,\n          serverUrl = _ref.serverUrl,\n          _ref$Moralis = _ref.Moralis,\n          Moralis = _ref$Moralis === void 0 ? null : _ref$Moralis;\n\n      if (!serverUrl && !apiKey) {\n        throw new Error('SolanaApi.initialize failed: initialize with apiKey or serverUrl');\n      }\n\n      if (apiKey) this.apiKey = apiKey;\n      if (serverUrl) this.serverUrl = serverUrl;\n      this.Moralis = Moralis;\n    }\n  }, {\n    key: \"getBody\",\n    value: function (params, bodyParams) {\n      var _this = this;\n\n      if (!params || !bodyParams || !bodyParams.length) {\n        return undefined;\n      }\n\n      var body = {};\n      (0, _forEach.default)(bodyParams).call(bodyParams, function (_ref2) {\n        var key = _ref2.key,\n            type = _ref2.type,\n            required = _ref2.required;\n\n        if (params[key] === undefined) {\n          if (required) throw new Error(\"param \".concat(key, \" is required!\"));\n        } else if (type === _this.BodyParamTypes.setBody) {\n          body = params[key];\n        } else {\n          body[key] = params[key];\n        } // remove the param so it doesn't also get added as a query param\n\n\n        delete params[key];\n      });\n      return body;\n    }\n  }, {\n    key: \"getParameterizedUrl\",\n    value: function (url, params) {\n      var _context;\n\n      if (!(0, _keys.default)(params).length) return url; // find url params, they start with :\n\n      var requiredParams = (0, _filter.default)(_context = url.split('/')).call(_context, function (s) {\n        return s && (0, _includes.default)(s).call(s, ':');\n      });\n      if (!requiredParams.length) return url;\n      var parameterizedUrl = url;\n      (0, _forEach.default)(requiredParams).call(requiredParams, function (p) {\n        // strip the : and replace with param value\n        var key = p.substr(1);\n        var value = params[key];\n\n        if (!value) {\n          throw new Error(\"required param \".concat(key, \" not provided\"));\n        }\n\n        parameterizedUrl = parameterizedUrl.replace(p, value); // remove required param from param list\n        // so it doesn't become part of the query params\n\n        delete params[key];\n      });\n      return parameterizedUrl;\n    }\n  }, {\n    key: \"getErrorMessage\",\n    value: function (error, url) {\n      var _error$response, _error$response$data;\n\n      return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || \"Solana API error while calling \".concat(url);\n    }\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref3) {\n        var endpoint, params, _endpoint$method, method, url, bodyParams, User, user, parameterizedUrl, body, response, msg;\n\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                endpoint = _ref3.endpoint, params = _ref3.params;\n                _endpoint$method = endpoint.method, method = _endpoint$method === void 0 ? 'GET' : _endpoint$method, url = endpoint.url, bodyParams = endpoint.bodyParams;\n\n                if (this.Moralis) {\n                  User = this.Moralis.User;\n                  user = User.current();\n\n                  if (!params.address) {\n                    if (user) {\n                      params.address = user.get('solAddress');\n                    }\n                  }\n                }\n\n                if (!params.network) params.network = 'mainnet';\n                if (!params.responseType) params.responseType = 'native';\n\n                if (this.apiKey) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.apiCall(endpoint.name, params));\n\n              case 7:\n                _context2.prev = 7;\n                parameterizedUrl = this.getParameterizedUrl(url, params);\n                body = this.getBody(params, bodyParams);\n                _context2.next = 12;\n                return axios(this.baseURL + parameterizedUrl, {\n                  params: params,\n                  method: method,\n                  body: body,\n                  headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'x-api-key': this.apiKey\n                  }\n                });\n\n              case 12:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", response.data);\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](7);\n                msg = this.getErrorMessage(_context2.t0, url);\n                throw new Error(msg);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this, [[7, 16]]);\n      }));\n\n      return function () {\n        return _fetch.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"apiCall\",\n    value: function () {\n      var _apiCall = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(name, options) {\n        var http, response, _error$response2, _error$response2$data;\n\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.serverUrl) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('SolanaAPI not initialized, run Moralis.start() first');\n\n              case 2:\n                _context3.prev = 2;\n                http = axios.create({\n                  baseURL: this.serverUrl\n                });\n                _context3.next = 6;\n                return http.post(\"/functions/sol-\".concat(name), options, {\n                  headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json'\n                  }\n                });\n\n              case 6:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response.data.result);\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                if (!((_error$response2 = _context3.t0.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                throw new Error(_context3.t0.response.data.error);\n\n              case 14:\n                throw _context3.t0;\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2, this, [[2, 10]]);\n      }));\n\n      return function () {\n        return _apiCall.apply(this, arguments);\n      };\n    }()\n  }]);\n  return SolanaApi;\n}();\n\n(0, _defineProperty2.default)(SolanaApi, \"baseURL\", 'https://solana-gateway.moralis.io');\n(0, _defineProperty2.default)(SolanaApi, \"BodyParamTypes\", {\n  setBody: 'set body',\n  property: 'property'\n});\n(0, _defineProperty2.default)(SolanaApi, \"account\", {\n  balance: function () {\n    var _balance = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n      var options,\n          _args3 = arguments;\n      return _regenerator.default.wrap(function (_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n              return _context4.abrupt(\"return\", SolanaApi.fetch({\n                endpoint: {\n                  \"method\": \"GET\",\n                  \"group\": \"account\",\n                  \"name\": \"balance\",\n                  \"url\": \"/account/:network/:address/balance\"\n                },\n                params: options\n              }));\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function () {\n      return _balance.apply(this, arguments);\n    };\n  }(),\n  getSPL: function () {\n    var _getSPL = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n      var options,\n          _args4 = arguments;\n      return _regenerator.default.wrap(function (_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n              return _context5.abrupt(\"return\", SolanaApi.fetch({\n                endpoint: {\n                  \"method\": \"GET\",\n                  \"group\": \"account\",\n                  \"name\": \"getSPL\",\n                  \"url\": \"/account/:network/:address/tokens\"\n                },\n                params: options\n              }));\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function () {\n      return _getSPL.apply(this, arguments);\n    };\n  }(),\n  getNFTs: function () {\n    var _getNFTs = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n      var options,\n          _args5 = arguments;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};\n              return _context6.abrupt(\"return\", SolanaApi.fetch({\n                endpoint: {\n                  \"method\": \"GET\",\n                  \"group\": \"account\",\n                  \"name\": \"getNFTs\",\n                  \"url\": \"/account/:network/:address/nft\"\n                },\n                params: options\n              }));\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function () {\n      return _getNFTs.apply(this, arguments);\n    };\n  }(),\n  getPortfolio: function () {\n    var _getPortfolio = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var options,\n          _args6 = arguments;\n      return _regenerator.default.wrap(function (_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n              return _context7.abrupt(\"return\", SolanaApi.fetch({\n                endpoint: {\n                  \"method\": \"GET\",\n                  \"group\": \"account\",\n                  \"name\": \"getPortfolio\",\n                  \"url\": \"/account/:network/:address/portfolio\"\n                },\n                params: options\n              }));\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function () {\n      return _getPortfolio.apply(this, arguments);\n    };\n  }()\n});\n(0, _defineProperty2.default)(SolanaApi, \"nft\", {\n  getNFTMetadata: function () {\n    var _getNFTMetadata = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {\n      var options,\n          _args7 = arguments;\n      return _regenerator.default.wrap(function (_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n              return _context8.abrupt(\"return\", SolanaApi.fetch({\n                endpoint: {\n                  \"method\": \"GET\",\n                  \"group\": \"nft\",\n                  \"name\": \"getNFTMetadata\",\n                  \"url\": \"/nft/:network/:address/metadata\"\n                },\n                params: options\n              }));\n\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function () {\n      return _getNFTMetadata.apply(this, arguments);\n    };\n  }()\n});\nvar _default = SolanaApi;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}